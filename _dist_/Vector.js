export class Vector{constructor(t,s){this.x=t,this.y=s}normalize(){const t=this.length;return t>0&&(this.x/=t,this.y/=t),this}multiply(t){return new Vector(this.x*t,this.y*t)}divide(t){return new Vector(this.x/t,this.y/t)}add(t){return new Vector(this.x+t.x,this.y+t.y)}subtract(t){return new Vector(this.x-t.x,this.y-t.y)}dotProduct(t){return this.x*t.x+this.y*t.y}distance(t){return Math.sqrt((t.x-this.x)*(t.x-this.x)+(t.y-this.y)*(t.y-this.y))}matrixMultiply(t,s,i,n){return new Vector(t*this.x+s*this.y,i*this.x+n*this.y)}static flattenPointsOn(t,s){let i=Number.MAX_VALUE,n=-Number.MAX_VALUE;for(const r of t){const h=r.dotProduct(s);h<i&&(i=h),h>n&&(n=h)}return[i,n]}get length(){return Math.sqrt(this.dotProduct(this))}}
